#   Codes by sunshinelzt   #
#     t.me/sunshinelzt     #
# This code under AGPL-3.0 #

from .. import loader, utils
import aiohttp
import logging

logger = logging.getLogger(__name__)

@loader.tds
class CheckerTGMod(loader.Module):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–∏—Ç—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ API"""

    strings = {
        "name": "CheckerTG",
        "checking": "<emoji id=5312761529620724326>üïµ</emoji> <b>[CheckerAPI]</b> –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É...",
        "getting_id": "<emoji id=5312761529620724326>üîç</emoji> <b>[CheckerAPI]</b> –û–ø—Ä–µ–¥–µ–ª—è—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
        "response": (
            "<emoji id=6021527789754852614>‚úÖ</emoji> <b>[CheckerAPI]</b> <u>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</u>\n\n"
            "<emoji id=5466067023296850447>üë§</emoji> <b>ID:</b> <code>{user_id}</code>\n"
            "<emoji id=5460910603862105027>üìä</emoji> <b>–°—Ç–∞—Ç—É—Å:</b> <code>{status}</code>\n"
            "<emoji id=5464222038336177963>üìû</emoji> <b>–î–∞–Ω–Ω—ã–µ:</b> <code>{data}</code>\n"
            "<emoji id=5203282991565838731>‚è≥</emoji> <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{time}</code> ms"
        ),
        "no_user": "<emoji id=5312149028952733148>‚ö†Ô∏è</emoji> <b>[CheckerAPI]</b> –£–∫–∞–∂–∏—Ç–µ ID, username –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "error": "<emoji id=6022549192248977621>üö®</emoji> <b>[CheckerAPI]</b> –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: <code>{}</code>",
        "user_not_found": "<emoji id=5312149028952733148>‚ùå</emoji> <b>[CheckerAPI]</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    }

    async def get_user_id(self, username, client):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç user ID –ø–æ username"""
        try:
            entity = await client.get_entity(username)
            return entity.id
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID {username}: {e}")
            return None

    @loader.owner
    async def checkcmd(self, m):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç ID –Ω–∞ —Å–ª–∏—Ç—ã–π –Ω–æ–º–µ—Ä (–ø–æ ID, username –∏–ª–∏ reply)"""
        reply = await m.get_reply_message()
        user_input = utils.get_args_raw(m) or (reply.sender_id if reply else None)

        if not user_input:
            return await m.edit(self.strings["no_user"])

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ID, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username
        if isinstance(user_input, str) and user_input.startswith("@"):
            await m.edit(self.strings["getting_id"])
            user_id = await self.get_user_id(user_input, m.client)
            if not user_id:
                return await m.edit(self.strings["user_not_found"].format(user_input))
        else:
            user_id = str(user_input)

        await m.edit(self.strings["checking"])

        url = f"https://api.d4n13l3k00.ru/tg/leaked/check?uid={user_id}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    if resp.status != 200:
                        raise ValueError(f"HTTP {resp.status}")
                    data = await resp.json()

            await m.edit(
                self.strings["response"].format(
                    user_id=user_id,
                    status=data.get("status", "unknown"),
                    data=data.get("data", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                    time=round(data.get("time", 0), 3),
                )
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await m.edit(self.strings["error"].format(str(e)))
