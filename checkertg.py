#   Codes by sunshinelzt   #
#     t.me/sunshinelzt     #
# This code under AGPL-3.0 #

from .. import loader, utils
import aiohttp

@loader.tds
class CheckerTGMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–∏—Ç—ã–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ API"""

    strings = {
        "name": "CheckerTG",
        "checking": "üïµ <b>[CheckerAPI]</b> –í—ã–ø–æ–ª–Ω—è—é –ø—Ä–æ–≤–µ—Ä–∫—É...",
        "getting_id": "üîç <b>[CheckerAPI]</b> –û–ø—Ä–µ–¥–µ–ª—è—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...",
        "response": (
            "‚úÖ <b>[CheckerAPI]</b> <u>–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏</u>\n\n"
            "üë§ <b>ID:</b> <code>{user_id}</code>\n"
            "üìû <b>–î–∞–Ω–Ω—ã–µ:</b> <code>{data}</code>\n"
            "‚è≥ <b>–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</b> <code>{time}</code> ms"
        ),
        "no_user": "‚ö†Ô∏è <b>[CheckerAPI]</b> –£–∫–∞–∂–∏—Ç–µ ID, username –∏–ª–∏ –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        "error": "üö® <b>[CheckerAPI]</b> –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: <code>{}</code>",
        "user_not_found": "‚ùå <b>[CheckerAPI]</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
    }

    async def get_user_id(self, username, client):
        """–ü–æ–ª—É—á–∞–µ–º user ID –ø–æ username —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Telegram API"""
        try:
            entity = await client.get_entity(username)
            return entity.id
        except Exception as e:
            return None  # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

    @loader.owner
    async def checkcmd(self, m):
        """–û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Å–ª–∏—Ç—ã–π –Ω–æ–º–µ—Ä"""
        reply = await m.get_reply_message()
        # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –∏–ª–∏ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_input = utils.get_args_raw(m) or (reply.sender_id if reply else None)

        if not user_input:
            return await m.edit(self.strings["no_user"])

        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ ID
        if isinstance(user_input, str) and user_input.startswith("@"):
            await m.edit(self.strings["getting_id"])
            user_id = await self.get_user_id(user_input, m.client)
            if not user_id:
                return await m.edit(self.strings["user_not_found"].format(user_input))
        else:
            user_id = str(user_input)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        await m.edit(self.strings["checking"])

        url = f"https://api.d4n13l3k00.ru/tg/leaked/check?uid={user_id}"

        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url) as resp:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                    if resp.status != 200:
                        raise ValueError(f"HTTP {resp.status}")
                    data = await resp.json()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
            result_message = self.strings["response"].format(
                user_id=user_id,
                data=data.get("data", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"),
                time=round(data.get("time", 0), 3)
            )
            await m.edit(result_message)

        except Exception as e:
            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ—ë –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await m.edit(self.strings["error"].format(str(e)))
