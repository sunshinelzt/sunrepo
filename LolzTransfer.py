# meta developer

import logging
import requests
from telethon import loader, utils, Button

logger = logging.getLogger(__name__)

@loader.tds
class LolzTransferMod(loader.Module):
    """–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–≤–æ–¥—ã –Ω–∞ lolz.live –ø—Ä—è–º–æ –∏–∑ Hikka Userbot"""
    strings = {"name": "LolzTransfer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", "", "üîë API-–∫–ª—é—á –æ—Ç lolz.live",
            "SECRET_PHRASE", "", "üîê –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
            "HOLD_TIME", 0, "‚è≥ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–ª–¥–∞ (0 ‚Äî –±–µ–∑ —Ö–æ–ª–¥–∞)",
            "HOLD_OPTION", "hour", "‚è≥ –ï–¥–∏–Ω–∏—Ü–∞ —Ö–æ–ª–¥–∞ (hour/day)"
        )

    async def client_ready(self, client, db):
        self.client = client

    async def lolzmcmd(self, message):
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .lolzm <–Ω–∏–∫> <—Å—É–º–º–∞> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        args = utils.get_args_raw(message).split()
        if len(args) < 2:
            await message.edit("‚ùå <b>–û—à–∏–±–∫–∞:</b> –£–∫–∞–∂–∏—Ç–µ <code>.lolzm –Ω–∏–∫ —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</code>")
            return

        nickname, amount, *comment = args
        try:
            amount = float(amount)
            if amount <= 0:
                raise ValueError
        except ValueError:
            await message.edit("‚ùå <b>–û—à–∏–±–∫–∞:</b> –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
            return

        comment = " ".join(comment) if comment else "üí¨ –ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        user = self.get_user_by_nickname(nickname)
        if not user:
            await message.edit(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{nickname}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        balance = self.get_balance()
        if balance is None:
            await message.edit("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
            return
        if amount > balance:
            await message.edit(f"‚ùå <b>–û—à–∏–±–∫–∞:</b> –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤.\nüí∞ –ë–∞–ª–∞–Ω—Å: <code>{balance} RUB</code>")
            return

        profile_url = f"https://lolz.live/members/{user['user_id']}/"
        text = (
            f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:</b> <code>{amount} RUB</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <a href='{profile_url}'>{user['username']}</a>\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{comment}</i>\n"
            f"‚è≥ <b>–•–æ–ª–¥:</b> {self.config['HOLD_TIME']} {self.config['HOLD_OPTION']}\n\n"
            f"üîí <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º!</b>"
        )

        buttons = [
            [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user['user_id']}_{amount}_{comment}"),
             Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
        ]

        await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode="html")

    def get_user_by_nickname(self, nickname):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É"""
        url = f"https://api.zelenka.guru/users/find?username={nickname}"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            if data and "user_id" in data[0]:
                return data[0]
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {nickname}: {e}")
        return None

    def get_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞"""
        url = "https://api.lzt.market/balance"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            return float(data.get("rub", 0))
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return None

    async def on_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫"""
        data = call.data.decode("utf-8")
        if data.startswith("confirm_"):
            _, user_id, amount, comment = data.split("_", 3)
            response = self.transfer_funds(user_id, amount, comment)
            if response.get("success"):
                await call.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
            else:
                error = response.get("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
                await call.answer(f"‚ùå {error}", alert=True)
        elif data == "cancel":
            await call.answer("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", alert=True)

    def transfer_funds(self, user_id, amount, comment):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        url = "https://api.lzt.market/balance/transfer"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        data = {
            "amount": float(amount),
            "currency": "rub",
            "secret_answer": self.config["SECRET_PHRASE"],
            "user_id": int(user_id),
            "comment": comment,
            "hold": self.config["HOLD_TIME"],
            "hold_option": self.config["HOLD_OPTION"]
        }
        try:
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return {"error": "–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞."}
