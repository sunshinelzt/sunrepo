# meta developer

from telethon import loader, utils
import logging
from LOLZTEAM.Client import Forum, Market
from telethon import Button
import asyncio
import re
from datetime import datetime

logger = logging.getLogger(__name__)

@loader.tds
class LolzTransferMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ lolz.live —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"""
    strings = {
        "name": "LolzTransfer",
        "invalid_args": "‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.lolzm –Ω–∏–∫ —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</code>",
        "user_not_found": "‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ lolz.live.</b>",
        "transfer_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {}",
        "insufficient_funds": "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</b>",
        "invalid_amount": "‚ùå <b>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.</b>",
        "invalid_currency": "‚ùå <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b> USD, EUR, RUB.",
        "auth_error": "‚ùå <b>–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.</b>",
        "cancel_transfer": "‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.",
        "successful_transfer": "‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω! ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {}",
        "processing": "‚è≥ <b>–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...</b>",
        "config_updated": "‚úÖ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>",
        "balance_info": "üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ Lolz:</b>\n{}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", "", "API –∫–ª—é—á –æ—Ç lolz.live",
            "SECRET_PHRASE", "", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
            "HOLD_TIME", 0, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–ª–¥–∞ (0 - –±–µ–∑ —Ö–æ–ª–¥–∞)",
            "HOLD_OPTION", "hour", "–ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–ª–¥–∞ (hour/day)",
            "DEFAULT_CURRENCY", "rub", "–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (usd/eur/rub)",
            "AUTO_CONFIRM", False, "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –±–µ–∑ –∑–∞–ø—Ä–æ—Å–∞ (True/False)",
            "TRANSFER_LIMIT", 1000, "–õ–∏–º–∏—Ç —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞ (0 - –±–µ–∑ –ª–∏–º–∏—Ç–∞)"
        )
        self.market = None
        self.forum = None

    async def client_ready(self, client, db):
        self.client = client
        self.db = db
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self._initialize_api()
        
    def _initialize_api(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–æ–≤"""
        if self.config["API_KEY"]:
            try:
                self.market = Market(token=self.config["API_KEY"])
                self.forum = Forum(token=self.config["API_KEY"])
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API: {e}")
                self.market = None
                self.forum = None

    async def lolzconfigcmd(self, message):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥—É–ª—è: .lolzconfig –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ"""
        args = utils.get_args(message)
        
        if len(args) < 2:
            config_info = "\n".join([
                f"üîπ <b>{key}</b>: <code>{self.config[key] if key != 'SECRET_PHRASE' and key != 'API_KEY' else '***'}</code>"
                for key in self.config
            ])
            await message.edit(f"‚öôÔ∏è <b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n{config_info}\n\n"
                               f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.lolzconfig –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–Ω–∞—á–µ–Ω–∏–µ</code>")
            return
            
        param, value = args[0].upper(), " ".join(args[1:])
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–π
        if param in ["HOLD_TIME", "TRANSFER_LIMIT"]:
            try:
                value = int(value)
            except ValueError:
                await message.edit(f"‚ùå <b>–ü–∞—Ä–∞–º–µ—Ç—Ä {param} –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º</b>")
                return
        elif param == "AUTO_CONFIRM":
            value = value.lower() in ["true", "1", "yes", "–¥–∞"]
        
        if param in self.config:
            self.config[param] = value
            # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–ª—é—á–∞
            if param == "API_KEY":
                self._initialize_api()
            await message.edit(self.strings["config_updated"])
        else:
            await message.edit(f"‚ùå <b>–ü–∞—Ä–∞–º–µ—Ç—Ä {param} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")

    async def lolzmcmd(self, message):
        """–ü–µ—Ä–µ–≤–æ–¥: .lolzm –Ω–∏–∫ —Å—É–º–º–∞ [–≤–∞–ª—é—Ç–∞] [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        if not self.market or not self.forum:
            self._initialize_api()
            if not self.market or not self.forum:
                await message.edit(self.strings["auth_error"])
                return
                
        await message.edit(self.strings["processing"])
        
        args = utils.get_args_raw(message).split()
        
        if len(args) < 2:
            await message.edit(self.strings["invalid_args"])
            return

        nickname = args[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã
        try:
            amount = float(args[1])
        except ValueError:
            await message.edit(self.strings["invalid_amount"])
            return
            
        if amount <= 0:
            await message.edit(self.strings["invalid_amount"])
            return
            
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–∞
        if self.config["TRANSFER_LIMIT"] > 0 and amount > self.config["TRANSFER_LIMIT"]:
            await message.edit(f"‚ùå <b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ ({self.config['TRANSFER_LIMIT']}).</b>")
            return
            
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∞–ª—é—Ç—ã
        if len(args) >= 3 and args[2].lower() in ["usd", "eur", "rub"]:
            currency = args[2].lower()
            comment_start = 3
        else:
            currency = self.config["DEFAULT_CURRENCY"]
            comment_start = 2
            
        comment = " ".join(args[comment_start:]) if len(args) > comment_start else f"–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç {datetime.now().strftime('%d.%m.%Y %H:%M')}"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = await self.get_user_by_nickname(nickname)
        if not user:
            await message.edit(self.strings["user_not_found"].format(nickname))
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        balance = await self.get_balance()
        if not balance:
            await message.edit("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.</b>")
            return
            
        if currency in balance and float(balance[currency]) < amount:
            await message.edit(self.strings["insufficient_funds"])
            return

        # –ê–≤—Ç–æ–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        if self.config["AUTO_CONFIRM"]:
            response = await self.transfer_funds(user["id"], amount, currency, comment)
            if response.get("success"):
                transaction_id = response.get("transfer_id", "N/A")
                await message.edit(f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n"
                                 f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <a href='https://lolz.live/members/{user['id']}'>{user['name']}</a>\n"
                                 f"üí∏ <b>–°—É–º–º–∞:</b> {amount} {currency.upper()}\n"
                                 f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n"
                                 f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}")
            else:
                error = response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await message.edit(self.strings["transfer_error"].format(error))
        else:
            profile_url = f"https://lolz.live/members/{user['id']}/"
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
            balance_info = f"<b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> {balance.get(currency, 0)} {currency.upper()}"
            
            text = (
                f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b>: <code>{amount} {currency.upper()}</code>\n"
                f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>: <a href='{profile_url}'>{user['name']}</a>\n"
                f"üí∞ {balance_info}\n"
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: <i>{comment}</i>\n"
                f"‚è≥ <b>–•–æ–ª–¥</b>: {self.config['HOLD_TIME']} {self.config['HOLD_OPTION']}"
            )

            buttons = [
                [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user['id']}_{amount}_{currency}_{comment}"),
                 Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
            ]

            try:
                await message.delete()
                await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode='html')
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                await message.edit("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

    async def lolzbalancecmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ Lolz"""
        if not self.market:
            self._initialize_api()
            if not self.market:
                await message.edit(self.strings["auth_error"])
                return
        
        await message.edit("‚è≥ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ...</b>")
        
        balance = await self.get_balance()
        if not balance:
            await message.edit("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ.</b>")
            return
            
        balance_text = "\n".join([f"üîπ <b>{currency.upper()}</b>: <code>{amount}</code>" for currency, amount in balance.items()])
        await message.edit(self.strings["balance_info"].format(balance_text))

    async def lolzhistorycmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤: .lolzhistory [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ]"""
        if not self.market:
            self._initialize_api()
            if not self.market:
                await message.edit(self.strings["auth_error"])
                return
                
        args = utils.get_args(message)
        limit = 5
        
        if args and args[0].isdigit():
            limit = int(args[0])
            if limit > 20:
                limit = 20  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
                
        await message.edit("‚è≥ <b>–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤...</b>")
        
        try:
            response = await self.market.payments.history(limit=limit)
            history = response.json()
            
            if not history.get("success"):
                await message.edit("‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤.</b>")
                return
                
            transfers = history.get("transfers", [])
            
            if not transfers:
                await message.edit("‚ÑπÔ∏è <b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø—É—Å—Ç–∞.</b>")
                return
                
            result = "üìú <b>–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:</b>\n\n"
            
            for transfer in transfers:
                transfer_type = "‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ" if transfer.get("is_outgoing") else "‚¨ÖÔ∏è –ü–æ–ª—É—á–µ–Ω–æ"
                date = datetime.fromtimestamp(transfer.get("date", 0)).strftime("%d.%m.%Y %H:%M")
                amount = transfer.get("amount", 0)
                currency = transfer.get("currency", "").upper()
                comment = transfer.get("comment", "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è")
                user = transfer.get("user", {})
                user_link = f"<a href='https://lolz.live/members/{user.get('user_id')}'>{user.get('username', 'Unknown')}</a>"
                
                result += (f"<b>{transfer_type}</b> {date}\n"
                          f"üí∞ <b>{amount} {currency}</b> {'–∫' if transfer.get('is_outgoing') else '–æ—Ç'} {user_link}\n"
                          f"üí¨ <i>{comment}</i>\n\n")
                
            await message.edit(result)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            await message.edit(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}</b>")

    async def get_user_by_nickname(self, nickname):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É –Ω–∞ —Ñ–æ—Ä—É–º–µ"""
        try:
            response = await self.forum.users.get(nickname=nickname)
            if response.get("success"):
                return {"id": response["user"]["user_id"], "name": response["user"]["username"]}
            return None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nickname}: {e}")
            return None
            
    async def get_balance(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            response = await self.market.user.me()
            data = response.json()
            
            if not data.get("success"):
                return None
                
            balance = {}
            balance_data = data.get("user", {}).get("balance", {})
            
            for currency in ["usd", "eur", "rub"]:
                balance[currency] = balance_data.get(currency, 0)
                
            return balance
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: {e}")
            return None

    async def on_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        data = call.data.decode("utf-8")
        
        if data.startswith("confirm_"):
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
            parts = data.split("_", 4)
            if len(parts) < 5:
                await call.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.", alert=True)
                return
                
            _, user_id, amount, currency, comment = parts
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await self.client.edit_message(
                call.message,
                f"‚è≥ <b>–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ {amount} {currency.upper()}...</b>",
                buttons=None,
                parse_mode='html'
            )
            
            response = await self.transfer_funds(user_id, amount, currency, comment)
            
            if response.get("success"):
                transaction_id = response.get("transfer_id", "N/A")
                await self.client.edit_message(
                    call.message,
                    f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n"
                    f"üí∏ <b>–°—É–º–º–∞:</b> {amount} {currency.upper()}\n"
                    f"üî¢ <b>ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b> {transaction_id}\n"
                    f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {comment}",
                    parse_mode='html'
                )
                await call.answer(self.strings["successful_transfer"].format(transaction_id), alert=True)
            else:
                error = response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                await self.client.edit_message(
                    call.message,
                    f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:</b> {error}",
                    parse_mode='html'
                )
                await call.answer(self.strings["transfer_error"].format(error), alert=True)
        elif data == "cancel":
            await self.client.edit_message(
                call.message,
                "‚ùå <b>–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.</b>",
                buttons=None,
                parse_mode='html'
            )
            await call.answer(self.strings["cancel_transfer"], alert=True)

    async def transfer_funds(self, user_id, amount, currency, comment):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ float –∏ –≤–∞–ª—é—Ç—É –≤ –Ω–∏–∂–Ω–∏–π —Ä–µ–≥–∏—Å—Ç—Ä
            amount = float(amount)
            currency = currency.lower()

            # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã –∏ –≤–∞–ª—é—Ç—ã
            if amount <= 0:
                return {"error": "–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."}
            if currency not in ["usd", "eur", "rub"]:
                return {"error": "–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞."}

            response = await self.market.payments.transfer(
                amount=amount,
                currency=currency,
                secret_answer=self.config["SECRET_PHRASE"],
                user_id=int(user_id),
                comment=comment,
                hold=self.config["HOLD_TIME"],
                hold_option=self.config["HOLD_OPTION"]
            )
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return {"error": str(e)}
