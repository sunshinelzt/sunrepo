# meta developer

from .. import loader, utils
import logging
import requests
from telethon import Button

logger = logging.getLogger(__name__)

@loader.tds
class LolzTransferMod(loader.Module):
    """–ò–¥–µ–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –Ω–∞ lolz.live –ø–æ –Ω–∏–∫—É"""
    strings = {"name": "LolzTransfer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", "", "API –∫–ª—é—á –æ—Ç lolz.live",
            "SECRET_PHRASE", "", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"
        )

    async def client_ready(self, client, db):
        self.client = client

    async def lolzmcmd(self, message):
        """–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥: .lolzm –Ω–∏–∫ —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        args = utils.get_args_raw(message).split()

        if len(args) < 3:
            await message.edit("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `.lolzm –Ω–∏–∫ 100 rub [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]`")
            return

        nickname, amount, currency = args[:3]
        comment = " ".join(args[3:]) if len(args) > 3 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        user_id, username = await self.get_user_info(nickname)
        if not user_id:
            await message.edit(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å `{nickname}` –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ lolz.live.")
            return

        profile_url = f"https://lolz.live/members/{user_id}/"
        text = (f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b>: <code>{amount} {currency.upper()}</code>\n"
                f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>: <a href='{profile_url}'>{username}</a>\n"
                f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: <i>{comment}</i>")

        buttons = [
            [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user_id}_{amount}_{currency}_{comment}"),
             Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
        ]

        await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode='html')

    async def get_user_info(self, nickname):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∏ –Ω–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å lolz.live"""
        url = f"https://api.lolz.live/v1/user/{nickname}"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        try:
            response = requests.get(url, headers=headers, timeout=5)
            if response.status_code == 200:
                data = response.json()
                return data.get("user_id"), data.get("username")
        except requests.exceptions.Timeout:
            logger.error("‚è≥ API Lolz.live –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ API Lolz: {e}")
        return None, None

    async def on_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏"""
        data = call.data.decode("utf-8")
        if data.startswith("confirm_"):
            _, user_id, amount, currency, comment = data.split("_", 4)
            response = self.transfer_funds(user_id, amount, currency, comment)
            if response.get("success"):
                await call.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
            else:
                error = response.get("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
                await call.answer(f"‚ùå {error}", alert=True)
        elif data == "cancel":
            await call.answer("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", alert=True)

    def transfer_funds(self, user_id, amount, currency, comment):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —á–µ—Ä–µ–∑ API Lolz.live"""
        url = "https://api.lolz.live/v1/market/transfer"
        headers = {"Authorization": f"Bearer " + self.config["API_KEY"]}
        data = {
            "receiver": user_id,
            "amount": amount,
            "currency": currency,
            "comment": comment,
            "secret_answer": self.config["SECRET_PHRASE"],
            "transfer_hold": "no"
        }
        try:
            response = requests.post(url, headers=headers, json=data, timeout=5)
            return response.json()
        except requests.exceptions.Timeout:
            logger.error("‚è≥ API Lolz.live –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (—Ç–∞–π–º–∞—É—Ç)")
            return {"error": "–°–µ—Ä–≤–µ—Ä lolz.live –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ."}
