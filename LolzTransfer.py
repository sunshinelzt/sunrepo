# meta developer

import logging
import requests
from telethon import Button
from .. import loader, utils  # Hikka loader

logger = logging.getLogger(__name__)

@loader.tds
class LolzTransferMod(loader.Module):
    """üí∏ –£–º–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥ –Ω–∞ lolz.live —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º"""

    strings = {"name": "LolzTransfer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", "", "üîë API-–∫–ª—é—á –æ—Ç lolz.live",
            "SECRET_PHRASE", "", "üîê –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤"
        )

    async def client_ready(self, client, db):
        self.client = client

    async def lolzmcmd(self, message):
        """üí∞ –ü–µ—Ä–µ–≤–æ–¥: .lolzm –Ω–∏–∫ —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        args = utils.get_args_raw(message).split()

        if len(args) < 2:
            await message.edit("<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.lolzm –Ω–∏–∫ —Å—É–º–º–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</code>")
            return

        nickname, amount = args[:2]
        comment = " ".join(args[2:]) if len(args) > 2 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        # üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = self.get_user_by_nickname(nickname)
        if not user:
            await message.edit(f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{nickname}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")
            return

        profile_url = f"https://lolz.live/members/{user['id']}/"

        # üí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balance = self.get_balance()
        if balance is None:
            await message.edit("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å.")
            return

        if float(amount) > balance:
            await message.edit(f"üö´ <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!</b> –í–∞—à –±–∞–ª–∞–Ω—Å: <code>{balance} RUB</code>")
            return

        text = (
            f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b>: <code>{amount} RUB</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>: <a href='{profile_url}'>{user['name']}</a>\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: <i>{comment}</i>\n"
        )

        buttons = [
            [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user['id']}_{amount}_{comment}")],
            [Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
        ]

        await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode="html")

    def get_user_by_nickname(self, nickname):
        """üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        url = f"https://api.zelenka.guru/users/find?username={nickname}"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            if data and "user_id" in data[0]:
                return {"id": data[0]["user_id"], "name": data[0]["username"]}
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ {nickname}: {e}")
        return None

    def get_balance(self):
        """üí∞ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞"""
        url = "https://api.lzt.market/balance"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()
            data = response.json()
            return float(data.get("rub", 0))
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
        return None

    async def on_callback_query(self, call):
        """üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        data = call.data.decode("utf-8")
        if data.startswith("confirm_"):
            _, user_id, amount, comment = data.split("_", 3)
            response = self.transfer_funds(user_id, amount, comment)
            if response.get("success"):
                await call.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
                await call.edit(f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ {amount} RUB —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</b>")
            else:
                error = response.get("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
                await call.answer(f"‚ùå {error}", alert=True)
        elif data == "cancel":
            await call.answer("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", alert=True)
            await call.edit("‚ö†Ô∏è <b>–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.</b>")

    def transfer_funds(self, user_id, amount, comment):
        """üí∏ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
        url = "https://api.lzt.market/balance/transfer"
        headers = {"Authorization": f"Bearer {self.config['API_KEY']}"}
        data = {
            "amount": float(amount),
            "currency": "rub",
            "secret_answer": self.config["SECRET_PHRASE"],
            "user_id": int(user_id),
            "comment": comment
        }
        try:
            response = requests.post(url, headers=headers, json=data)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
            return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ."}
