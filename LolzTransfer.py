# meta developer

import requests
import urllib.parse
from telethon import events, Button
from telethon.tl.custom import Message
from hikka import loader, utils

class LolzTransferMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ Lolz.live"""
    strings = {"name": "LolzTransfer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "api_key", "", "API-–∫–ª—é—á –æ—Ç LolzTeam (Lolz.live)",
            "secret_phrase", "", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
            "hold_time", 0, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–ª–¥–∞ (0 = –±–µ–∑ —Ö–æ–ª–¥–∞)",
            "hold_unit", "hour", "–ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–ª–¥–∞ (hour/day)"
        )

    async def client_ready(self, client, db):
        self.client = client

    async def lolzmcmd(self, message: Message):
        """–ü–µ—Ä–µ–≤–æ–¥: .lolzm <–Ω–∏–∫> <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        args = utils.get_args_raw(message).split()

        if len(args) < 3:
            return await message.edit("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.lolzm –Ω–∏–∫ —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</code>")

        nickname, amount, currency = args[:3]
        comment = " ".join(args[3:]) if len(args) > 3 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        user = await self.find_user(nickname)
        if not user:
            return await message.edit(f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{nickname}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")

        profile_url = f"https://lolz.live/members/{user['id']}/"
        text = (
            f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:</b> <code>{amount} {currency.upper()}</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <a href='{profile_url}'>{user['name']}</a>\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{comment}</i>\n"
            f"‚è≥ <b>–•–æ–ª–¥:</b> {self.config['hold_time']} {self.config['hold_unit']}"
        )

        buttons = [
            [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user['id']}_{amount}_{currency}_{comment}"),
             Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
        ]

        await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode='html')

    async def find_user(self, nickname: str):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É"""
        url = f"https://api.zelenka.guru/users/find?username={urllib.parse.quote(nickname)}"
        headers = {"Authorization": f"Bearer {self.config['api_key']}"}

        try:
            response = requests.get(url, headers=headers)
            data = response.json()
            if response.status_code == 200 and "user_id" in data:
                return {"id": data["user_id"], "name": data["username"]}
        except requests.RequestException as e:
            return None

    async def on_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫"""
        data = call.data.decode("utf-8")
        if data.startswith("confirm_"):
            _, user_id, amount, currency, comment = data.split("_", 4)
            response = await self.transfer_funds(user_id, amount, currency, comment)
            if response.get("success"):
                await call.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
            else:
                error = response.get("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
                await call.answer(f"‚ùå {error}", alert=True)
        elif data == "cancel":
            await call.answer("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", alert=True)

    async def transfer_funds(self, user_id, amount, currency, comment):
        """–ü–µ—Ä–µ–≤–æ–¥ –¥–µ–Ω–µ–≥"""
        url = "https://api.lzt.market/balance/transfer"
        headers = {"Authorization": f"Bearer {self.config['api_key']}"}
        data = {
            "amount": float(amount),
            "currency": currency.lower(),
            "secret_answer": self.config["secret_phrase"],
            "user_id": int(user_id),
            "comment": comment,
            "hold": self.config["hold_time"],
            "hold_option": self.config["hold_unit"]
        }

        try:
            response = requests.post(url, headers=headers, json=data)
            return response.json()
        except requests.RequestException:
            return {"error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞."}
