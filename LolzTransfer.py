# meta developer

from telethon import loader, utils
import logging
from LOLZTEAM.Client import Forum, Market
from telethon import Button
import asyncio

logger = logging.getLogger(__name__)

@loader.tds
class LolzTransferMod(loader.Module):
    """–ú–æ–¥—É–ª—å –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥ –Ω–∞ lolz.live —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏"""
    strings = {"name": "LolzTransfer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_KEY", "", "API –∫–ª—é—á –æ—Ç lolz.live",
            "SECRET_PHRASE", "", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
            "HOLD_TIME", 0, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–ª–¥–∞ (0 - –±–µ–∑ —Ö–æ–ª–¥–∞)",
            "HOLD_OPTION", "hour", "–ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–ª–¥–∞ (hour/day)"
        )

    async def client_ready(self, client, db):
        self.client = client
        # Initialize API clients after config is loaded
        self.market = Market(token=self.config["API_KEY"])
        self.forum = Forum(token=self.config["API_KEY"])

    async def lolzmcmd(self, message):
        """–ü–µ—Ä–µ–≤–æ–¥: .lolzm –Ω–∏–∫ —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        args = utils.get_args_raw(message).split()

        if len(args) < 3:
            await message.edit("‚ùå <b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.lolzm –Ω–∏–∫ —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</code>")
            return

        nickname, amount_str, currency = args[:3]
        comment = " ".join(args[3:]) if len(args) > 3 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        # Validate amount
        try:
            amount = float(amount_str)
            if amount <= 0:
                await message.edit("‚ùå <b>–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.</b>")
                return
        except ValueError:
            await message.edit("‚ùå <b>–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.</b>")
            return

        # Validate currency
        currency = currency.lower()
        if currency not in ["usd", "eur", "rub"]:
            await message.edit("‚ùå <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: USD, EUR, RUB.</b>")
            return

        user = await self.get_user_by_nickname(nickname)
        if not user:
            await message.edit(f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{nickname}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ lolz.live.</b>")
            return

        profile_url = f"https://lolz.live/members/{user['id']}/"
        text = (
            f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏</b>: <code>{amount} {currency.upper()}</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å</b>: <a href='{profile_url}'>{user['name']}</a>\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π</b>: <i>{comment}</i>\n"
            f"‚è≥ <b>–•–æ–ª–¥</b>: {self.config['HOLD_TIME']} {self.config['HOLD_OPTION']}"
        )

        # Encode comment for button data to avoid parsing issues
        encoded_comment = comment.replace("_", "Íòé")  # Using rare Unicode character as separator

        buttons = [
            [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user['id']}_{amount}_{currency}_{encoded_comment}"),
             Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
        ]

        try:
            await message.delete()
            await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode='html')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.edit("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.</b>")

    async def get_user_by_nickname(self, nickname):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É –Ω–∞ —Ñ–æ—Ä—É–º–µ"""
        try:
            response = await self.forum.users.get(nickname=nickname)
            return {"id": response["user_id"], "name": response["username"]}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nickname}: {e}")
            return None

    async def callback_handler(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        data = call.data.decode("utf-8")
        
        if data.startswith("confirm_"):
            parts = data.split("_", 4)
            if len(parts) != 5:
                await call.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.", alert=True)
                return
                
            _, user_id, amount, currency, encoded_comment = parts
            comment = encoded_comment.replace("Íòé", "_")  # Decode comment
            
            try:
                response = await self.transfer_funds(user_id, amount, currency, comment)
                if response and response.get("success"):
                    await call.edit(
                        f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n"
                        f"üí∏ <b>–°—É–º–º–∞</b>: <code>{amount} {currency.upper()}</code>\n"
                        f"üÜî <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å ID</b>: <code>{user_id}</code>",
                        buttons=None
                    )
                else:
                    error = response.get("error", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")
                    await call.edit(f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ:</b> {error}", buttons=None)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
                await call.edit("‚ùå <b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.</b>", buttons=None)
        
        elif data == "cancel":
            await call.edit("‚ùå <b>–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.</b>", buttons=None)

    async def transfer_funds(self, user_id, amount, currency, comment):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ float
            amount = float(amount)
            
            response = await self.market.payments.transfer(
                amount=amount,
                currency=currency,
                secret_answer=self.config["SECRET_PHRASE"],
                user_id=int(user_id),
                comment=comment,
                hold=self.config["HOLD_TIME"],
                hold_option=self.config["HOLD_OPTION"]
            )
            return response.json()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
            return {"success": False, "error": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {str(e)}"}
