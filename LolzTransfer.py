# meta developer

import requests
from bs4 import BeautifulSoup
from telethon import events, Button
from hikka import loader, utils
from telethon.tl.custom import Message

class LolzTransferMod(loader.Module):
    """–ú–æ–¥—É–ª—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ Lolz.live —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —á–µ—Ä–µ–∑ BeautifulSoup"""
    strings = {"name": "LolzTransfer"}

    def __init__(self):
        self.config = loader.ModuleConfig(
            "api_key", "", "API-–∫–ª—é—á –¥–ª—è Zelenka (Lolz.live)",
            "secret_phrase", "", "–°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
            "hold_time", 0, "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ö–æ–ª–¥–∞ (0 = –±–µ–∑ —Ö–æ–ª–¥–∞)",
            "hold_unit", "hour", "–ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ö–æ–ª–¥–∞ (hour/day)"
        )

    async def client_ready(self, client, db):
        self.client = client

    async def lolzmcmd(self, message: Message):
        """–ü–µ—Ä–µ–≤–æ–¥: .lolzm <–Ω–∏–∫> <—Å—É–º–º–∞> <–≤–∞–ª—é—Ç–∞> [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]"""
        args = utils.get_args_raw(message).split()

        if len(args) < 3:
            return await message.edit("<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:</b> <code>.lolzm –Ω–∏–∫ —Å—É–º–º–∞ –≤–∞–ª—é—Ç–∞ [–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π]</code>")

        nickname, amount, currency = args[:3]
        comment = " ".join(args[3:]) if len(args) > 3 else "–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"

        user = await self.find_user(nickname)
        if not user:
            return await message.edit(f"‚ùå <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> <code>{nickname}</code> <b>–Ω–µ –Ω–∞–π–¥–µ–Ω.</b>")

        profile_url = f"https://lolz.live/members/{user['id']}/"
        text = (
            f"üí∏ <b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏:</b> <code>{amount} {currency.upper()}</code>\n"
            f"üë§ <b>–ü–æ–ª—É—á–∞—Ç–µ–ª—å:</b> <a href='{profile_url}'>{user['name']}</a>\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> <i>{comment}</i>\n"
            f"‚è≥ <b>–•–æ–ª–¥:</b> {self.config['hold_time']} {self.config['hold_unit']}"
        )

        buttons = [
            [Button.inline("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", data=f"confirm_{user['id']}_{amount}_{currency}_{comment}"),
             Button.inline("‚ùå –û—Ç–º–µ–Ω–∞", data="cancel")]
        ]

        await self.client.send_message(message.chat_id, text, buttons=buttons, parse_mode='html')

    async def find_user(self, nickname: str):
        """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Ω–∏–∫—É —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º BeautifulSoup"""
        url = f"https://zelenka.guru/search?query={nickname}"
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        }

        try:
            response = requests.get(url, headers=headers)
            response.raise_for_status()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –Ω–µ 200
            soup = BeautifulSoup(response.text, 'html.parser')

            # –ü–æ–∏—Å–∫ –Ω—É–∂–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –≤ –∫–∞–∫–æ–º-—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ —Å –∫–ª–∞—Å—Å–æ–º 'user-item'
            user_item = soup.find("div", class_="user-item")
            if not user_item:
                return None  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ

            user_id = user_item["data-user-id"]
            user_name = user_item.find("span", class_="username").text.strip()

            return {"id": user_id, "name": user_name}
        except requests.exceptions.RequestException as e:
            return None

    async def on_callback_query(self, call):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
        data = call.data.decode("utf-8")
        if data.startswith("confirm_"):
            _, user_id, amount, currency, comment = data.split("_", 4)
            response = await self.transfer_funds(user_id, amount, currency, comment)
            if response.get("success"):
                await call.answer("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω!", alert=True)
            else:
                error = response.get("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ.")
                await call.answer(f"‚ùå {error}", alert=True)
        elif data == "cancel":
            await call.answer("‚ùå –ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω.", alert=True)

    async def transfer_funds(self, user_id, amount, currency, comment):
        """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤"""
        try:
            url = "https://api.lzt.market/balance/transfer"
            headers = {
                "Authorization": f"Bearer {self.config['api_key']}",
                "Content-Type": "application/json"
            }
            data = {
                "amount": float(amount),
                "currency": currency.lower(),
                "secret_answer": self.config["secret_phrase"],
                "user_id": user_id,
                "comment": comment,
                "hold_time": self.config["hold_time"],
                "hold_unit": self.config["hold_unit"]
            }
            response = requests.post(url, json=data, headers=headers)
            response.raise_for_status()  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –Ω–µ–Ω–æ—Ä–º–∞–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            return response.json()
        except requests.exceptions.RequestException as e:
            return {"error": "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ."}
