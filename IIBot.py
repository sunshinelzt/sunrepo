# meta developer: @sunshinelzt

import random
from telethon import types
from .. import loader, utils


@loader.tds
class iibotMod(loader.Module):
    """–ë–æ—Ç-–¥—É—Ä–∞—á–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ"""

    strings = {
        "name": "IIBot",
        "enabled": "‚úÖ –†–µ–∂–∏–º –¥—É—Ä–∞–∫–∞ –≤–∫–ª—é—á—ë–Ω!",
        "disabled": "‚ùå –†–µ–∂–∏–º –¥—É—Ä–∞–∫–∞ –æ—Ç–∫–ª—é—á—ë–Ω.",
        "chance_set": "üé≤ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 1 –∫ {}",
        "need_arg": "‚ö† –ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ!",
        "blacklist_added": "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫.",
        "blacklist_removed": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–¥–∞–ª—ë–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.",
        "blacklist_exists": "‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.",
        "blacklist_not_exists": "‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "blacklist", [], "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
            "reply_chance", 1, "–®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ (1 –∫ N, –≥–¥–µ N ‚Äî —á–∏—Å–ª–æ)"
        )
        self.active_chats = set()

    async def iicmd(self, m: types.Message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç–µ: /ii on –∏–ª–∏ /ii off"""
        if not m.chat:
            return

        chat_id = m.chat.id
        args = utils.get_args_raw(m).lower()

        if args in {"on", "–≤–∫–ª", "enable"}:
            self.active_chats.add(chat_id)
            return await utils.answer(m, self.strings["enabled"])

        if args in {"off", "–≤—ã–∫–ª", "disable"}:
            self.active_chats.discard(chat_id)
            return await utils.answer(m, self.strings["disabled"])

        return await utils.answer(m, self.strings["need_arg"])

    async def randomicmd(self, m: types.Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: /randomi N (0 - –≤—Å–µ–≥–¥–∞, N - 1 –∫ N)"""
        args = utils.get_args_raw(m)

        if args.isdigit():
            self.config["reply_chance"] = int(args)
            return await utils.answer(m, self.strings["chance_set"].format(args))

        return await utils.answer(m, self.strings["need_arg"])

    async def watcher(self, m: types.Message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not isinstance(m, types.Message) or not m.chat:
            return

        chat_id, user_id = m.chat.id, m.sender_id

        if chat_id not in self.active_chats or user_id == (await m.client.get_me()).id or user_id in self.config["blacklist"]:
            return

        if self.config["reply_chance"] and random.randint(1, self.config["reply_chance"]) != 1:
            return

        words = [word for word in m.raw_text.split() if len(word) >= 3]
        if not words:
            return

        search_word = random.choice(words)
        messages = [
            msg async for msg in m.client.iter_messages(chat_id, search=search_word)
            if msg.replies and msg.replies.max_id
        ]

        if messages:
            base_message = random.choice(messages)
            reply_msgs = [
                msg async for msg in m.client.iter_messages(
                    chat_id,
                    ids=list(range(base_message.id + 1, base_message.replies.max_id + 1))
                )
                if msg.reply_to and msg.reply_to.reply_to_msg_id == base_message.id
            ]
            if reply_msgs:
                return await m.reply(random.choice(reply_msgs).text)

    def get_blacklist(self):
        """–ü–æ–ª—É—á–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        return self.config["blacklist"]

    def add_to_blacklist(self, user_id):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"""
        if user_id not in self.config["blacklist"]:
            self.config["blacklist"].append(user_id)
            return self.strings["blacklist_added"].format(user_id=user_id)
        return self.strings["blacklist_exists"]

    def remove_from_blacklist(self, user_id):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞"""
        if user_id in self.config["blacklist"]:
            self.config["blacklist"].remove(user_id)
            return self.strings["blacklist_removed"].format(user_id=user_id)
        return self.strings["blacklist_not_exists"]
