# meta developer: @sunshinelzt

import random
import asyncio
from typing import List, Set, Dict, Any, Optional
from telethon import types, events
from .. import loader, utils


@loader.tds
class EnhancedIIBotMod(loader.Module):
    """
    –£–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞
    - –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤
    - –ü–∞–º—è—Ç—å —á–∞—Ç–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
    """

    strings = {
        "name": "IIBot",
        "enabled": "‚úÖ –†–µ–∂–∏–º –¥—É—Ä–∞–∫–∞ –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ!",
        "disabled": "‚ùå –†–µ–∂–∏–º –¥—É—Ä–∞–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        "chance_set": "üé≤ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 1 –∫ {}",
        "need_arg": "‚ö† –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ!",
        "blacklist_added": "üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫",
        "blacklist_removed": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} —É–¥–∞–ª–µ–Ω –∏–∑ —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞",
        "blacklist_list": "üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ:\n{}",
        "templates_updated": "üìù –®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
        "templates_list": "üìã –¢–µ–∫—É—â–∏–µ —à–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤:\n{}",
        "invalid_number": "‚ö† –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ",
        "memory_cleared": "üßπ –ü–∞–º—è—Ç—å —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞",
        "status": "üìä –°—Ç–∞—Ç—É—Å:\n‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {}\n‚Ä¢ –®–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: 1 –∫ {}\n‚Ä¢ –†–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏: {}\n‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ß–°: {}\n‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {}",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "blacklist", [], "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç",
            "generate_text", True, "–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
            "max_memory_per_chat", 500, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ —á–∞—Ç",
            "min_word_length", 3, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞",
            "max_search_results", 50, "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞",
            "response_templates", [
                "–•–º... –¥–∞–∂–µ –Ω–µ –∑–Ω–∞—é ü§î",
                "–ê —á—Ç–æ —Ç—ã —Ö–æ—Ç–µ–ª —É—Å–ª—ã—à–∞—Ç—å?",
                "–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –ê —Ç—ã –∫–∞–∫ –¥—É–º–∞–µ—à—å?",
                "–ú–æ–∂–µ—Ç –±—ã—Ç—å... –∞ –º–æ–∂–µ—Ç –∏ –Ω–µ—Ç üòè",
                "–≠—Ç–æ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ –¥–ª—è –º–µ–Ω—è...",
                "–ü–æ–∂–∞–ª—É–π, –ø—Ä–æ–º–æ–ª—á—É ü§ê",
                "–Ø —Ö–∑, –Ω–µ —Å–ø—Ä–∞—à–∏–≤–∞–π –º–µ–Ω—è —Ç–∞–∫–æ–µ üòÇ",
                "–ú–º–º... –Ω–∞ —ç—Ç–æ —É –º–µ–Ω—è –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞...",
                "–Ø –Ω–µ —É–≤–µ—Ä–µ–Ω, –Ω–æ —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ... –Ω–µ—Ç üòÖ",
                "–≠—Ç–æ —Å–ª–∏—à–∫–æ–º —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –º–µ–Ω—è üò∂"
            ], "–®–∞–±–ª–æ–Ω—ã —Å–ª—É—á–∞–π–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤, –∫–æ–≥–¥–∞ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        )
        self.active_chats: Set[int] = set()
        self.reply_chance: int = 5  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —à–∞–Ω—Å 1 –∫ 5
        self.chat_memory: Dict[int, List[Dict[str, Any]]] = {}
        self._me = None
        self._db = None

    async def client_ready(self, client, db):
        """–í—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        self._db = db
        self._me = await client.get_me()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self._load_data()

    def _load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        data = self._db.get(self.strings["name"], "data", {})
        self.active_chats = set(data.get("active_chats", []))
        self.reply_chance = data.get("reply_chance", 5)
    
    def _save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        self._db.set(self.strings["name"], "data", {
            "active_chats": list(self.active_chats),
            "reply_chance": self.reply_chance
        })

    async def iicmd(self, message: types.Message):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–µ–π –±–æ—Ç–∞ –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .ii [on|off]
        """
        if not message.chat:
            return await utils.answer(message, "‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")

        chat_id = message.chat.id
        args = utils.get_args_raw(message).lower()

        if args in {"on", "–≤–∫–ª", "enable"}:
            self.active_chats.add(chat_id)
            self._save_data()
            return await utils.answer(message, self.strings["enabled"])

        if args in {"off", "–≤—ã–∫–ª", "disable"}:
            self.active_chats.discard(chat_id)
            self._save_data()
            return await utils.answer(message, self.strings["disabled"])

        # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        is_active = chat_id in self.active_chats
        status = self.strings["status"].format(
            "–î–∞" if is_active else "–ù–µ—Ç",
            self.reply_chance,
            len(self.chat_memory.get(chat_id, [])),
            len(self.config["blacklist"]),
            "–î–∞" if self.config["generate_text"] else "–ù–µ—Ç"
        )
        return await utils.answer(message, status)

    async def chancecmd(self, message: types.Message):
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∞–Ω—Å–∞ –æ—Ç–≤–µ—Ç–∞
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .chance <—á–∏—Å–ª–æ>
        """
        args = utils.get_args_raw(message)

        if not args:
            return await utils.answer(message, f"–¢–µ–∫—É—â–∏–π —à–∞–Ω—Å –æ—Ç–≤–µ—Ç–∞: 1 –∫ {self.reply_chance}")

        if not args.isdigit() or int(args) < 1:
            return await utils.answer(message, self.strings["invalid_number"])

        self.reply_chance = int(args)
        self._save_data()
        return await utils.answer(message, self.strings["chance_set"].format(args))

    async def blacklistcmd(self, message: types.Message):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–Ω—ã–º —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .blacklist [add|remove|list] [user_id]
        """
        args = utils.get_args(message)
        
        if not args or args[0].lower() == "list":
            blacklist = self.config["blacklist"]
            if not blacklist:
                return await utils.answer(message, "üìã –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            
            return await utils.answer(message, self.strings["blacklist_list"].format(
                "\n".join([f"‚Ä¢ {user_id}" for user_id in blacklist])
            ))
        
        if len(args) < 2:
            return await utils.answer(message, self.strings["need_arg"])
        
        action, user_id = args[0].lower(), args[1]
        
        if not user_id.isdigit():
            return await utils.answer(message, "‚ö† ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        
        user_id = int(user_id)
        
        if action == "add":
            if user_id not in self.config["blacklist"]:
                self.config["blacklist"].append(user_id)
                return await utils.answer(message, self.strings["blacklist_added"].format(user_id))
            return await utils.answer(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        
        if action == "remove":
            if user_id in self.config["blacklist"]:
                self.config["blacklist"].remove(user_id)
                return await utils.answer(message, self.strings["blacklist_removed"].format(user_id))
            return await utils.answer(message, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –≤ —á–µ—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        
        return await utils.answer(message, "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ add, remove –∏–ª–∏ list")

    async def templatescmd(self, message: types.Message):
        """
        –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
        –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .templates [list|set "—à–∞–±–ª–æ–Ω1" "—à–∞–±–ª–æ–Ω2" ...]
        """
        args = utils.get_args(message)
        
        if not args or args[0].lower() == "list":
            templates = self.config["response_templates"]
            return await utils.answer(message, self.strings["templates_list"].format(
                "\n".join([f"‚Ä¢ {template}" for template in templates])
            ))
        
        if args[0].lower() == "set" and len(args) > 1:
            self.config["response_templates"] = args[1:]
            return await utils.answer(message, self.strings["templates_updated"])
        
        return await utils.answer(message, "‚ö† –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ list –∏–ª–∏ set")

    async def clearmemorycmd(self, message: types.Message):
        """–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –±–æ—Ç–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
        if not message.chat:
            return await utils.answer(message, "‚ö† –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–∞—Ö")
        
        chat_id = message.chat.id
        if chat_id in self.chat_memory:
            self.chat_memory[chat_id] = []
            return await utils.answer(message, self.strings["memory_cleared"])
        
        return await utils.answer(message, "–ù–µ—Ç –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")

    async def watcher(self, message: types.Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤"""
        if not isinstance(message, types.Message) or not message.chat:
            return

        chat_id, user_id = message.chat.id, message.sender_id

        # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–º—è—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (–¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π)
        self._update_memory(chat_id, message)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ–ª–∂–Ω—ã –ª–∏ –º—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (chat_id not in self.active_chats or 
            user_id == self._me.id or 
            user_id in self.config["blacklist"] or
            not message.text):  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ç–µ–∫—Å—Ç–∞
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —à–∞–Ω—Å–∞
        if random.randint(1, self.reply_chance) != 1:
            return

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        await self._process_and_reply(message)

    def _update_memory(self, chat_id: int, message: types.Message):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
        if chat_id not in self.chat_memory:
            self.chat_memory[chat_id] = []
        
        # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∏–ª–∏ –æ—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text or len(message.text) < 3:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç–∏
        self.chat_memory[chat_id].append({
            "id": message.id,
            "text": message.text,
            "sender": message.sender_id,
            "timestamp": message.date.timestamp(),
            "reply_to": message.reply_to.reply_to_msg_id if message.reply_to else None
        })
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
        if len(self.chat_memory[chat_id]) > self.config["max_memory_per_chat"]:
            self.chat_memory[chat_id] = self.chat_memory[chat_id][-self.config["max_memory_per_chat"]:]

    async def _process_and_reply(self, message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        chat_id = message.chat.id
        text = message.text
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
        words = [
            word for word in text.split() 
            if len(word) >= self.config["min_word_length"] and not word.startswith(('http', '@', '#'))
        ]
        
        if not words:
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        response = await self._find_contextual_reply(chat_id, message, words)
        
        # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–±—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
        if not response and self.chat_memory.get(chat_id):
            response = await self._find_memory_based_reply(chat_id, words)
        
        # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –∏ generate_text –≤–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω—ã
        if not response and self.config["generate_text"]:
            response = self._generate_random_response()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –æ–Ω —É –Ω–∞—Å –µ—Å—Ç—å
        if response:
            await asyncio.sleep(random.uniform(1, 3))  # –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º
            await message.reply(response)

    async def _find_contextual_reply(self, chat_id: int, message: types.Message, words: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        search_words = random.sample(words, min(3, len(words)))
        
        for search_word in search_words:
            try:
                # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —ç—Ç–æ —Å–ª–æ–≤–æ
                messages = []
                async for msg in message.client.iter_messages(
                    chat_id, 
                    search=search_word,
                    limit=self.config["max_search_results"]
                ):
                    if msg.replies and msg.replies.max_id and msg.id != message.id:
                        messages.append(msg)
                
                if not messages:
                    continue
                
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–∞–º–∏
                base_message = random.choice(messages)
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                reply_msgs = []
                async for msg in message.client.iter_messages(
                    chat_id,
                    ids=list(range(base_message.id + 1, base_message.replies.max_id + 1))
                ):
                    if (msg.reply_to and 
                        msg.reply_to.reply_to_msg_id == base_message.id and
                        msg.sender_id != self._me.id):  # –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                        reply_msgs.append(msg)
                
                if reply_msgs:
                    # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∏–±–æ–ª–µ–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç
                    return random.choice(reply_msgs).text
            
            except Exception:
                continue
        
        return None

    async def _find_memory_based_reply(self, chat_id: int, words: List[str]) -> Optional[str]:
        """–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏ —á–∞—Ç–∞"""
        memory = self.chat_memory.get(chat_id, [])
        if not memory:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–∞—à–∏ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–ª–æ–≤–∞
        matching_messages = []
        for msg in memory:
            if any(word.lower() in msg["text"].lower() for word in words):
                matching_messages.append(msg)
        
        if not matching_messages:
            return None
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã
        for base_msg in matching_messages:
            # –ù–∞—Ö–æ–¥–∏–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            replies = [
                msg for msg in memory 
                if msg["reply_to"] == base_msg["id"] and msg["sender"] != self._me.id
            ]
            
            if replies:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
                return random.choice(replies)["text"]
        
        return None

    def _generate_random_response(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ —à–∞–±–ª–æ–Ω–æ–≤"""
        templates = self.config["response_templates"]
        return random.choice(templates)
