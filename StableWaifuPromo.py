# meta developer: @sunshinelzt
# meta name: PromoClaimer
# meta desc: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è @StableWaifuBot

import logging
import re
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger("PromoClaimer")

@loader.tds
class PromoClaimerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è @StableWaifuBot"""

    strings = {
        "name": "PromoClaimer",
        "promo_claimed": "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ <b>{promo}</b> (+{amount} —Ç–æ–∫–µ–Ω–æ–≤)",
        "promo_invalid": "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo}</b> –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω",
        "promo_already": "‚ö†Ô∏è –ü—Ä–æ–º–æ–∫–æ–¥ <b>{promo}</b> —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        "toggle_on": "‚úÖ –ê–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ <b>–≤–∫–ª—é—á–µ–Ω–∞</b>",
        "toggle_off": "‚ùå –ê–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ <b>–≤—ã–∫–ª—é—á–µ–Ω–∞</b>",
        "chat_on": "‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ <b>–≤–∫–ª—é—á–µ–Ω–æ</b>",
        "chat_off": "‚ùå –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ <b>–≤—ã–∫–ª—é—á–µ–Ω–æ</b>",
        "balance": "üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>{tokens}</b> —Ç–æ–∫–µ–Ω–æ–≤",
    }

    def __init__(self):
        self.config = {"active": True, "tracked_chats": set()}
        self.waifu_bot = "@StableWaifuBot"
        self.promo_pattern = re.compile(r"https://t\.me/StableWaifuBot\?start=promo_(\w+)")
        self.processed = set()

    async def client_ready(self, client, db):
        self.client, self.db = client, db
        self.config = self.db.get("PromoClaimer", "config", self.config)

    def save_config(self):
        self.db.set("PromoClaimer", "config", self.config)

    @loader.command(ru_doc="| –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    async def wpromo(self, message: Message):
        """| Toggle promo activation"""
        self.config["active"] = not self.config["active"]
        self.save_config()
        await utils.answer(message, self.strings["toggle_on"] if self.config["active"] else self.strings["toggle_off"])

    @loader.command(ru_doc="| –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —ç—Ç–æ–º —á–∞—Ç–µ")
    async def wpromo_chat(self, message: Message):
        """| Toggle promo tracking in this chat"""
        chat_id = message.chat_id
        if chat_id in self.config["tracked_chats"]:
            self.config["tracked_chats"].remove(chat_id)
            await utils.answer(message, self.strings["chat_off"])
        else:
            self.config["tracked_chats"].add(chat_id)
            await utils.answer(message, self.strings["chat_on"])
        self.save_config()

    @loader.command(ru_doc="| –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
    async def wbalance(self, message: Message):
        """| Check token balance"""
        async with self.client.conversation(self.waifu_bot) as conv:
            msg = await conv.send_message("/tokens")
            response = await conv.get_response()
            await msg.delete()
            await response.delete()
        await utils.answer(message, self.strings["balance"].format(tokens=response.text.split()[0]))

    @loader.watcher()
    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –≤ —á–∞—Ç–µ"""
        if not self.config["active"] or message.chat_id not in self.config["tracked_chats"]:
            return

        new_promos = set(self.promo_pattern.findall(message.text or "")) - self.processed
        for promo in new_promos:
            await self.activate_promo(promo)
            self.processed.add(promo)

    async def activate_promo(self, promo: str):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
        async with self.client.conversation(self.waifu_bot) as conv:
            msg = await conv.send_message(f"/start promo_{promo}")
            response = await conv.get_response()
            await msg.delete()
            await response.delete()

        text = response.text
        if "–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" in text:
            logger.info(self.strings["promo_invalid"].format(promo=promo))
        elif "—É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in text:
            logger.info(self.strings["promo_already"].format(promo=promo))
        else:
            amount = re.search(r"\(\+(\d+)", text)
            logger.info(self.strings["promo_claimed"].format(promo=promo, amount=amount.group(1) if amount else "?"))
