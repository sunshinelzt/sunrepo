# meta developer: @sunshinelzt

import logging
import re

from telethon.errors import AlreadyInConversationError
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger('PromoClaimer')

@loader.tds
class PromoClaimerMod(loader.Module):
    """Automatically claim https://t.me/StableWaifuBot promo from any chat"""
    
    strings = {
        "name": "PromoClaimer",
        "claimed_promo": "[PromoClaimer] üëå Successfully claimed promo {promo} for {amount} tokens!",
        "error_watcher": "[PromoClaimer] ‚õîÔ∏è Error while watching messages:\n{e}",
        "invalid_promo": "[PromoClaimer] üò¢ Promo {promo} is invalid or expired!",
        "already_claimed": "[PromoClaimer] üò¢ Promo {promo} has already been claimed!",
        "checktokens_failed": "[PromoClaimer] üö´ Failed to check token balance!\n{e}",
        "enabled": "[PromoClaimer] ‚úÖ Auto-claiming is now **ENABLED**",
        "disabled": "[PromoClaimer] ‚ùå Auto-claiming is now **DISABLED**",
        "status": "[PromoClaimer] ‚öôÔ∏è Auto-claiming is **{status}**",
    }

    strings_ru = {
        "claimed_promo": "[PromoClaimer] üëå –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–∞ {amount} —Ç–æ–∫–µ–Ω(-–æ–≤)!",
        "error_watcher": "[PromoClaimer] ‚õîÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n{e}",
        "invalid_promo": "[PromoClaimer] üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫!",
        "already_claimed": "[PromoClaimer] üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        "checktokens_failed": "[PromoClaimer] üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤!\n{e}",
        "enabled": "[PromoClaimer] ‚úÖ –ê–≤—Ç–æ-–ø—Ä–∏—ë–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ **–í–ö–õ–Æ–ß–ï–ù**",
        "disabled": "[PromoClaimer] ‚ùå –ê–≤—Ç–æ-–ø—Ä–∏—ë–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ **–í–´–ö–õ–Æ–ß–ï–ù**",
        "status": "[PromoClaimer] ‚öôÔ∏è –ê–≤—Ç–æ-–ø—Ä–∏—ë–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ **{status}**",
        "_cls_doc": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –¥–ª—è https://t.me/StableWaifuBot",
    }

    async def get_codes(self, text):
        """–ò—â–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –≤ —Ç–µ–∫—Å—Ç–µ"""
        promo_pattern = r'https?://t\.me/StableWaifuBot\?start=promo_([\w-]+)'
        text_promo_pattern = r'promo_([\w-]+)'

        codes = set(re.findall(promo_pattern, text))
        text_codes = set(re.findall(text_promo_pattern, text)) 

        return codes.union(text_codes)

    async def claim_promo(self, promo_code):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ StableWaifuBot"""
        async with self.client.conversation('StableWaifuBot') as conv:
            msg = await conv.send_message(f'/start {promo_code}')
            response = await conv.get_response()
            await conv.mark_read()
            await msg.delete()
            await response.delete()

        if '–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω' in response.text:
            logger.info(self.strings("invalid_promo").format(promo=promo_code))
        elif '–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' in response.text:
            logger.info(self.strings("already_claimed").format(promo=promo_code))
        else:
            amount_match = re.search(r'\(\+(\d+) —Ç–æ–∫–µ–Ω', response.text)
            amount = amount_match.group(1) if amount_match else "?"
            logger.info(self.strings("claimed_promo").format(promo=promo_code, amount=amount))

    async def check_tokens(self, message: Message):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤"""
        try:
            async with self.client.conversation('@StableWaifuBot') as conv:
                msg = await conv.send_message('/tokens')
                response = await conv.get_response()
                await conv.mark_read()
                await msg.delete()
                await response.delete()

            match = re.search(r'üíµ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: (\d+)', response.text)
            tokens = match.group(1) if match else "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å"

            await utils.answer(message, f"üíµ –¢–æ–∫–µ–Ω—ã: {tokens}")

        except Exception as e:
            logger.error(self.strings("checktokens_failed").format(e=str(e)))
            await utils.answer(message, self.strings("checktokens_failed").format(e=str(e)))

    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã"""
        if not self.get("enabled", True):
            return

        try:
            codes = await self.get_codes(message.text)
            for code in codes:
                await self.claim_promo(f'promo_{code}')
        except Exception as e:
            logger.error(self.strings("error_watcher").format(e=str(e)))

    @loader.command(ru_doc="| –í–∫–ª—é—á–∏—Ç—å / –≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–ø—Ä–∏—ë–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    async def wcheck(self, message: Message):
        """| Toggle auto-claiming promo codes"""
        new_state = not self.get("enabled", True)
        self.set("enabled", new_state)

        status = self.strings("enabled") if new_state else self.strings("disabled")
        await utils.answer(message, status)
