# meta developer: @sunshinelzt

import logging
import re
from telethon.errors import AlreadyInConversationError
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger("PromoClaimer")

@loader.tds
class PromoClaimerMod(loader.Module):
    """–ê–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ @StableWaifu"""

    strings = {
        "name": "PromoClaimer",
        "claimed_promo": "[PromoClaimer] üëå –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤!",
        "error_watcher": "[PromoClaimer] ‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n{e}",
        "invalid_promo": "[PromoClaimer] üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫!",
        "already_claimed": "[PromoClaimer] üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        "enabled": "[PromoClaimer] ‚úÖ –ê–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –í–ö–õ–Æ–ß–ï–ù!",
        "disabled": "[PromoClaimer] ‚ùå –ê–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –í–´–ö–õ–Æ–ß–ï–ù!",
        "balance": "[PromoClaimer] üíµ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {tokens}"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue("enabled", True, "–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"),
            loader.ConfigValue("groups", ["StableWaifu"], "–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"),
            loader.ConfigValue("bot_username", "StableWaifuBot", "–ë–æ—Ç –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"),
            loader.ConfigValue("notify_user", True, "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"),
            loader.ConfigValue("check_balance_after_claim", True, "–ü—Ä–æ–≤–µ—Ä—è—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏"),
            loader.ConfigValue("log_file", "promo_claimer.log", "–ò–º—è –ª–æ–≥-—Ñ–∞–π–ª–∞")
        )
        self.group_ids = {}

    async def client_ready(self, client, db):
        self.client = client
        await self.cache_group_ids()

    async def cache_group_ids(self):
        self.group_ids = {
            group: (await self.client.get_entity(f"t.me/{group}")).id
            for group in self.config["groups"]
        }

    @loader.command(ru_doc="| –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ-–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    async def wpromo(self, message: Message):
        self.config["enabled"] = not self.config["enabled"]
        await utils.answer(message, self.strings["enabled"] if self.config["enabled"] else self.strings["disabled"])

    @loader.command(ru_doc="| –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
    async def wcheck(self, message: Message):
        try:
            async with self.client.conversation(f"@{self.config['bot_username']}") as conv:
                await conv.send_message("/tokens")
                response = await conv.get_response()
                match = re.search(r"üíµ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\s*(\d+)", response.text)
                if match:
                    tokens = match.group(1)
                    await conv.mark_read()
                    await response.delete()
                    await utils.answer(message, self.strings["balance"].format(tokens=tokens))
                else:
                    await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.")
        except AlreadyInConversationError:
            pass

    @loader.watcher(incoming=True, edited_messages=True)
    async def watcher(self, message: Message):
        if not self.config["enabled"] or message.chat_id not in self.group_ids.values():
            return

        try:
            pattern = r'https://t\.me/StableWaifuBot\?start=promo_(\w+)'
            for match in re.findall(pattern, message.text):
                promo = f'promo_{match}'

                async with self.client.conversation(self.config["bot_username"]) as conv:
                    msg = await conv.send_message(f'/start {promo}')
                    response = await conv.get_response()
                    await conv.mark_read()
                    await msg.delete()
                    await response.delete()

                text = response.text

                if "ü•≤ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" in text:
                    logger.info(self.strings["invalid_promo"].format(promo=promo))
                elif "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in text:
                    logger.info(self.strings["already_claimed"].format(promo=promo))
                else:
                    amount = re.search(r"\(\+(\d+)", text)
                    amount = amount.group(1) if amount else "?"
                    logger.info(self.strings["claimed_promo"].format(promo=promo, amount=amount))

                    if self.config["notify_user"]:
                        await self.client.send_message(message.sender_id, self.strings["claimed_promo"].format(promo=promo, amount=amount))

                    if self.config["check_balance_after_claim"]:
                        await self.wcheck(message)

        except Exception as e:
            logger.exception(f"[PromoClaimer] –û—à–∏–±–∫–∞: {e}")
            if self.config["notify_user"]:
                await utils.answer(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
