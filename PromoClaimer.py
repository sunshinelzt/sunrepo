# meta developer: @sunshinelzt

import logging
import re
from telethon.errors import AlreadyInConversationError
from telethon.tl.types import Message
from .. import loader, utils

logger = logging.getLogger('PromoClaimer')

@loader.tds
class PromoClaimerMod(loader.Module):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã –∏–∑ –≥—Ä—É–ø–ø—ã https://t.me/StableWaifu"""
    
    strings = {
        "name": "PromoClaimer",
        "claimed_promo": "[PromoClaimer] üëå –£—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–∞ {amount} —Ç–æ–∫–µ–Ω–æ–≤!",
        "error_watcher": "[PromoClaimer] ‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π:\n{e}",
        "invalid_promo": "[PromoClaimer] üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫!",
        "already_claimed": "[PromoClaimer] üò¢ –ü—Ä–æ–º–æ–∫–æ–¥ {promo} —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        "enabled": "[PromoClaimer] ‚úÖ –ê–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –í–ö–õ–Æ–ß–ï–ù!",
        "disabled": "[PromoClaimer] ‚ùå –ê–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ –í–´–ö–õ–Æ–ß–ï–ù!",
    }

    GROUP_USERNAME = "StableWaifu"  # –Æ–∑–µ—Ä–Ω–µ–π–º –≥—Ä—É–ø–ø—ã

    async def get_group_id(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç ID –≥—Ä—É–ø–ø—ã –ø–æ —é–∑–µ—Ä–Ω–µ–π–º—É"""
        if not hasattr(self, "group_id"):
            entity = await self.client.get_entity(f"t.me/{self.GROUP_USERNAME}")
            self.group_id = entity.id
        return self.group_id

    async def client_ready(self, client, db):
        self.db = db
        self.enabled = self.db.get("PromoClaimer", "enabled", True)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∫–ª—é—á–µ–Ω–∏—è

    @loader.command(ru_doc="| –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤")
    async def wpromo(self, message: Message):
        """| –í–∫–ª/–≤—ã–∫–ª –∞–≤—Ç–æ–∑–∞–±–æ—Ä –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤"""
        self.enabled = not self.enabled
        self.db.set("PromoClaimer", "enabled", self.enabled)
        await utils.answer(message, self.strings["enabled"] if self.enabled else self.strings["disabled"])

    @loader..command(ru_doc="| –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤")
async def checktokens(self, message: Message):
    """| –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤"""
    try:
        async with self.client.conversation('@StableWaifuBot') as conv:
            await conv.send_message('/tokens')
            response = await 
            
            match = re.search(r"üíµ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:\s*(\d+)", response.text)

            if match:
                tokens = match.group(1)  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
                await conv.mark_read()
                await response.delete()
                await utils.answer(message, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {tokens}")

            else:
                await utils.answer(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.")

    except AlreadyInConversationError:
        pass

    @loader.watcher(incoming=True, edited_messages=True)
    async def watcher(self, message: Message):
        """–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥—ã —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ @StableWaifu"""
        if not self.enabled or message.chat_id != await self.get_group_id():
            return  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º, –µ—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–æ –∏–ª–∏ –Ω–µ —Ç–∞ –≥—Ä—É–ø–ø–∞

        try:
            pattern = r'https://t\.me/StableWaifuBot\?start=promo_(\w+)'
            for match in re.findall(pattern, message.text):
                promo = f'promo_{match}'

                async with self.client.conversation('StableWaifuBot') as conv:
                    msg = await conv.send_message(f'/start {promo}')
                    response = await conv.get_response()
                    await conv.mark_read()
                    await msg.delete()
                    await response.delete()

                text = response.text

                if "ü•≤ –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω" in text:
                    logger.info(self.strings["invalid_promo"].format(promo=promo))
                elif "‚ùå –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω" in text:
                    logger.info(self.strings["already_claimed"].format(promo=promo))
                else:
                    amount = re.search(r"\(\+(\d+)", text)
                    amount = amount.group(1) if amount else "?"
                    logger.info(self.strings["claimed_promo"].format(promo=promo, amount=amount))

        except Exception as e:
            logger.exception(f"[PromoClaimer] –û—à–∏–±–∫–∞: {e}")
