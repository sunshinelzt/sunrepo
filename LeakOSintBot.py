# meta developer @sunshinelzt

from hikka import loader, utils
import requests
import asyncio
from random import randint

class LeakOSintBot(loader.Module):
    """–ú–æ—â–Ω—ã–π –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LeakOSint API —Å –≤—ã—Å–æ–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –∏ —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö."""

    strings = {
        "name": "LeakOSintBot",
        "no_query": "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞.",
        "api_error": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "report_started": "‚úÖ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...",
        "report_success": "‚úÖ –û—Ç—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        "report_error": "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "stopped": "üõë –í—Å–µ –∑–∞–ø—Ä–æ—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.",
        "invalid_token": "‚ùå –¢–æ–∫–µ–Ω API –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.",
        "empty_results": "‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
        "limit_exceeded": "‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å.",
        "invalid_query": "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "API_TOKEN", "", "–¢–æ–∫–µ–Ω API –¥–ª—è LeakOsint",
            "LANG", "ru", "–Ø–∑—ã–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
            "LIMIT", 300, "–õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö",
            "REPORT_TYPE", "json", "–¢–∏–ø –æ—Ç—á—ë—Ç–∞ (json, short, html)",
            "BOT_NAME", "", "–ò–º—è –±–æ—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ @name (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)"
        )
        self.cash_reports = {}
        self.session = requests.Session()

    async def leakcmd(self, message):
        """–ó–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API LeakOsint. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .leak –∑–∞–ø—Ä–æ—Å"""
        await self._process_leak(message)

    async def _process_leak(self, message):
        args = utils.get_args_raw(message)
        if not args:
            await message.edit(self.strings["no_query"])
            return

        query_id = randint(0, 9999999)
        report = await self._generate_report(args, query_id)

        if not report:
            await message.edit(self.strings["api_error"])
            return

        await message.edit(self.strings["report_started"])

        if not report:
            await message.edit(self.strings["empty_results"])
            return

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        for page_id, report_text in enumerate(report):
            await message.respond(report_text, parse_mode="html")

        self.cash_reports[str(query_id)] = report
        await message.edit(self.strings["report_success"])

    async def _generate_report(self, query, query_id):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API."""
        url = "https://leakosintapi.com/"
        api_token = self.config["API_TOKEN"]
        lang = self.config["LANG"]
        limit = self.config["LIMIT"]
        report_type = self.config["REPORT_TYPE"]
        bot_name = self.config["BOT_NAME"]

        if not api_token:
            await message.edit(self.strings["invalid_token"])
            return None

        data = {
            "token": api_token,
            "request": query,
            "limit": limit,
            "lang": lang,
            "type": report_type,
            "bot_name": bot_name
        }
        try:
            response = await self._fetch_data(url, data)
            if not response:
                await message.edit(self.strings["api_error"])
                return None

            report = self._parse_report(response)
            if not report:
                await message.edit(self.strings["empty_results"])
                return None

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
            if len(report) > limit:
                await message.edit(self.strings["limit_exceeded"])
                return None

            return report
        except Exception as e:
            await message.edit(self.strings["report_error"])
            print(f"Error: {e}")
            return None

    async def _fetch_data(self, url, data):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."""
        try:
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, lambda: self.session.post(url, json=data).json())
            return response
        except requests.exceptions.RequestException as e:
            print(f"Request failed: {e}")
            return None

    def _parse_report(self, response):
        """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á—ë—Ç–∞ –∏–∑ API."""
        report = []
        for database_name, data in response.get("List", {}).items():
            text = [f"<b>{database_name}</b>", ""]
            text.append(data.get("InfoLeak", "") + "\n")

            if database_name != "No results found":
                for report_data in data.get("Data", []):
                    for column_name, value in report_data.items():
                        text.append(f"<b>{column_name}</b>: {value}")
                    text.append("")
            text = "\n".join(text)

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if len(text) > 3500:
                text = text[:3500] + text[3500:].split("\n")[0] + "\n\n–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–º–µ—Å—Ç–∏–ª–∏—Å—å –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            report.append(text)

        return report

    async def stopleakcmd(self, message):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–æ–∏—Å–∫–∞"""
        await self._stop_spam(message)

    async def _stop_spam(self, message):
        self.cash_reports.clear()
        await message.edit(self.strings["stopped"])

client = loader.Client()
client.run()
